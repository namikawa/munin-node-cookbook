#!/usr/bin/perl
# -*- perl -*-

=head1 NAME

tomcat_threads - Plugin to monitor the number of tomcat-threads
running on the machine, and (in addition to a simple process count),
separate then into "busy" or "idle" servers.

=head1 CONFIGURATION

Configurable variables

 timeout   - Connection timeout
 url       - Override default status-url
 ports     - HTTP port numbers
 user      - Manager username
 password  - Manager password
 connector - Connector to query, defaults to "http-".$PORT

=head1 USAGE

Requirements: Needs access to
http://<user>:<password>@localhost:8080/manager/status?XML=true (or
modify the address for another host). 

Tomcat 5.0 or higher.

A munin-user in $CATALINA_HOME/conf/tomcat-users.xml should be set up
for this to work.

Tip: To see if it's already set up correctly, just run this plugin
with the parameter "autoconf". If you get a "yes", everything should
work like a charm already.

tomcat-users.xml example:
    <user username="munin" password="<set this>" roles="standard,manager"/>

=head1 AUTHOR

Rune Nordb?e Skillingstad <runesk@linpro.no> (original version)
Kazuhiro Oinuma <oinume@gmail.com> (no XML::Simple version)

=head1 LICENSE

Unknown license

=head1 MAGIC MARKERS

 #%# family=manual
 #%# capabilities=autoconf

=cut

use strict;

my $ret = undef;

if (!eval "require LWP::UserAgent;") {
    $ret = "LWP::UserAgent not found";
}

my $URL      = exists $ENV{'url'}      ? $ENV{'url'}      : "http://%s:%s\@127.0.0.1:%d/manager/status?XML=true";
my $PORT     = exists $ENV{'ports'}    ? $ENV{'ports'}    : 8080;
my $USER     = exists $ENV{'user'}     ? $ENV{'user'}     : "munin";
my $PASSWORD = exists $ENV{'password'} ? $ENV{'password'} : "munin";
my $TIMEOUT  = exists $ENV{'timeout'}  ? $ENV{'timeout'}  : 30;
#my $CONNECTOR = exists $ENV{'connector'} ? $ENV{'connector'} : "http-" . $PORT;
my $CONNECTOR = exists $ENV{'connector'} ? $ENV{'connector'} : '"ajp-bio-8009"';

my $url = sprintf $URL, $USER, $PASSWORD, $PORT;

if (exists $ARGV[0] and $ARGV[0] eq "autoconf") {
    if ($ret) {
        print "no ($ret)\n";
        exit 0;
    }
    my $au = LWP::UserAgent->new(timeout => $TIMEOUT);
    my $repsonse = $au->request(HTTP::Request->new('GET',$url));
    if ($repsonse->is_success and $repsonse->content =~ /<status>.*<\/status>/im) {
        print "yes\n";
        exit 0;
    } else {
        print "no (no tomcat status)\n";
        exit 0;
    }
}

if (exists $ARGV[0] and $ARGV[0] eq "config") {
    print "graph_title Tomcat threads - $CONNECTOR\n";
    print "graph_args --base 1000 -l 0\n";
    print "graph_vlabel threads\n";
    print "graph_category tomcat\n";
#    print "graph_total total\n";
    print "graph_order busy idle max\n";
    print "busy.label busy threads\n";
    print "busy.draw AREA\n";
    print "idle.label idle threads\n";
    print "idle.draw STACK\n";
    print "max.label max threads\n";
    exit 0;
}

my $ua = LWP::UserAgent->new(timeout => $TIMEOUT);
my $response = $ua->request(HTTP::Request->new('GET',$url));
my $content = $response->content;

my %connectors = ();
my $current_connector = undef;
while ($content =~ m!<([\w-]+)\s*(.*?)/?>!igs) {
    my $element = strip($1);
    my $attributes_str = strip($2);

    my %attributes = ();
    for my $attr (split ' ', $attributes_str) {
        my ($key, $value) = split '=', $attr;
        $key = strip($key);
        $value = strip($value);
        if ($value =~ /^['"](.+)['"]$/) { # remove quote
            $value = $1;
            $attributes{$key} = $value;
        }
    }

    if ($element eq 'connector') {
        $current_connector = $attributes{name};
    }
    if ($element eq 'threadInfo') {
        # save threadInfo attributes
        $connectors{$current_connector} = \%attributes;
    }
}

if (defined $connectors{$CONNECTOR}) {
    my $thread_info = $connectors{$CONNECTOR};
    print(sprintf("busy.value %d\n", $thread_info->{currentThreadsBusy}));
    print(sprintf(
        "idle.value %d\n",
        $thread_info->{currentThreadCount} - $thread_info->{currentThreadsBusy}
    ));
    print(sprintf("max.value %d\n", $thread_info->{maxThreads}));
} else {
    print "busy.value U\n";
    print "idle.value U\n";
    print "max.value U\n";
}

sub strip {
    my $str = shift;
    unless (defined $str) {
        return undef;
    }

    $str =~ s/^\s+//s;
    $str =~ s/\s+$//s;
    return $str;
}

# vim:syntax=perl


